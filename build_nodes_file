#!/bin/bash

CASE_NAME=UNKNOWN
NOVNC_URL='https://mycluster/kanaka-noVNC-33e1462/vnc_auto.html'

CASE_SCRIPT=$(realpath ${1:-case_config.ini})
SITE_SCRIPT=$(realpath ${2:-site_config.ini})
TileSet=${3:-defaulTS}

# get case-specifig config paths (overriding defaults)
if [ -f "${CASE_SCRIPT}" ]; then
  sed -e "s@\[CASE\]@#!/bin/bash@" "${CASE_SCRIPT}" > case_config
  . case_config
fi

# get site-specifig config paths (overriding defaults)
if [ -f "${SITE_SCRIPT}" ]; then
  sed -e "s@\[SITE\]@#!/bin/bash@" "${SITE_SCRIPT}" > site_config
  . site_config
fi

FILEPATH=./list_dockers_pass

NUM=$( wc -l ${FILEPATH}| sed -e "s}^\([0-9]*\).*}\1}" )

function min {
   ( [ $1 -le $2 ] && echo $1 ) || ( [ $2 -lt $1 ] && echo $2 ) 
}

DATE=$(date +%F_%H-%M-%S)

function tag_int() {
    local line=$1
    local lineid=$2
    local name=$3
    local tagid=$4
    local out=${tagid}_$(eval echo \${$line[$lineid]} |sed -e "s&\ &_&g" -e "s/.*$name=\"\(.*\)\".*/\1/")
    echo $out
}

function tag_real() {
    local line=$1
    local lineid=$2
    local name=$3
    local tagid=$4
    local out=$(eval echo \${$line[$lineid]} |sed -e "s&\ &_&g" -e "s/.*$name=\"\(.*\)\".*/\1/" -e "s/{/{${tagid}_/")
    echo $out
}


echo '{ "nodes": [' > nodes.json
#echo 'echo '' >> nodes.json' >> nodes.json
i=0
while IFS='' read -r -u3 line || [[ -n "$line" ]]; do
  if [ X"${line}" == X"" ]; then  
      echo "error too old passord file."
      rm -f nodes.json
      exit 2
  fi


  i2=$((2*(i+1)))
  i0=$(printf "%03d" $((i+1)))
  thishost=${line% *}
  pass=${line##* }

  JsonStr=$(python3 -c "import json; print(json.load(open('tiledset.json'))['nodes']["$i"])")

  IFS=' ' read -r -a aline <<<${line2}

    # File name goes in the "info" field of nodes.json
  
  file_name=$(python3 -c "import json; JsonStr=\"$JsonStr\".replace(\"'\", '\"'); tile=json.loads(JsonStr); print(tile[\"name\"])")

  # {"IdLocation" : "1",
#  "dbid" : "15383",
#  "name" : "0036-Hot-0036_Locked_mean_13_1",
#  "pos_px_x" : "-1",
#  "pos_px_y" : "-1",
#  "tags" : ["{01_ip,10,13,31}","{02_if,1,1,4}","AstroAllAllTags","AstroIA_mean_newTags","Hot_0036_Locked","Mean","On","banded"],
#  "title" : "0036-Hot-0036_Locked_mean_13_1",
#  "url" : "http://mandelbrot.extra.cea.fr/wildos/DB/HJ/./Orbital_Period_0036/Hot_0036_Locked/0036-Hot-0036_Locked_p13_mean_1.png",
#  "variable" : "",
#  "comment" : "/apps/mdls/WildOS/DB/HJ/./Orbital_Period_0036/Hot_0036_Locked/0036-Hot-0036_Locked_p13_mean_1.png30/03/2022 (14:52:20)Note configBackground-color: 3D styleText color: Text shadowArrow in:TopRightBottomLeftDelete note!Delete thisDelete allCancel*This action cannot be undone"},

  # Commentaire/notes  

  if [ $i -gt 0 ]; then
      echo '},' >> nodes.json
  fi
  echo '{"title" : "'$i0' '$file_name'" ,' >> nodes.json
  echo '  "variable" : "ID-'$i0'_'$file_name'",' >> nodes.json

  URL=$(echo $NOVNC_URL | envsubst) # expand envars in $NOVNC_URL
    

  echo ' "url" : "'${URL}'?autoconnect=1&host='${HTTP_FRONTEND}'&port='${SOCKETdomain}${i0}'&encrypt=1&password='${pass}'&true_color=1",' >> nodes.json
  echo ' "comment" : "'$( python3 -c "import re,json; JsonStr=\"$JsonStr\".replace(\"'\", '\"'); tile=json.loads(JsonStr); print(re.sub(r'png.*',r'png',tile[\"comment\"]))")' ' ${DATE}'",' >> nodes.json
  echo ' "usersNotes"  : "node '$i'  : host '${thishost}' and file '${file_name}'",' >> nodes.json
  LIST_Tags=$(python3 -c "import json; JsonStr=\"$JsonStr\".replace(\"'\", '\"'); tile=json.loads(JsonStr); print(str(tile[\"tags\"]).replace(\"'\", '\"'))")
  echo ' "tags"  : '$LIST_Tags',' >> nodes.json
  
  echo '"connection" : 1' >> nodes.json

  i=$(( i + 1 ))
done 3< list_dockers_pass

echo '}' >> nodes.json
echo '] }' >> nodes.json

echo "var text_ = " > nodes.js
cat nodes.json >> nodes.js
echo 'var jsDataTab = text_.nodes;' >> nodes.js

exit 0
